//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Web.DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class XingEntities : DbContext
    {
        public XingEntities()
            : base("name=XingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<User> Users { get; set; }
    
        public virtual ObjectResult<sp_SearchUser_Result> sp_SearchUser(string userName, Nullable<int> ageFrom, Nullable<int> ageTo, string hobby)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var ageFromParameter = ageFrom.HasValue ?
                new ObjectParameter("ageFrom", ageFrom) :
                new ObjectParameter("ageFrom", typeof(int));
    
            var ageToParameter = ageTo.HasValue ?
                new ObjectParameter("ageTo", ageTo) :
                new ObjectParameter("ageTo", typeof(int));
    
            var hobbyParameter = hobby != null ?
                new ObjectParameter("hobby", hobby) :
                new ObjectParameter("hobby", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SearchUser_Result>("sp_SearchUser", userNameParameter, ageFromParameter, ageToParameter, hobbyParameter);
        }
    
        public virtual ObjectResult<User> SearchUser(string userName, Nullable<int> ageFrom, Nullable<int> ageTo, string hobby)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var ageFromParameter = ageFrom.HasValue ?
                new ObjectParameter("ageFrom", ageFrom) :
                new ObjectParameter("ageFrom", typeof(int));
    
            var ageToParameter = ageTo.HasValue ?
                new ObjectParameter("ageTo", ageTo) :
                new ObjectParameter("ageTo", typeof(int));
    
            var hobbyParameter = hobby != null ?
                new ObjectParameter("hobby", hobby) :
                new ObjectParameter("hobby", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("SearchUser", userNameParameter, ageFromParameter, ageToParameter, hobbyParameter);
        }
    
        public virtual ObjectResult<User> SearchUser(string userName, Nullable<int> ageFrom, Nullable<int> ageTo, string hobby, MergeOption mergeOption)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var ageFromParameter = ageFrom.HasValue ?
                new ObjectParameter("ageFrom", ageFrom) :
                new ObjectParameter("ageFrom", typeof(int));
    
            var ageToParameter = ageTo.HasValue ?
                new ObjectParameter("ageTo", ageTo) :
                new ObjectParameter("ageTo", typeof(int));
    
            var hobbyParameter = hobby != null ?
                new ObjectParameter("hobby", hobby) :
                new ObjectParameter("hobby", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("SearchUser", mergeOption, userNameParameter, ageFromParameter, ageToParameter, hobbyParameter);
        }
    }
}
